// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2020 21:20:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FORCE_BDF
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FORCE_BDF_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] DATAOUT;
reg EXEC1;
// wires                                               
wire [15:0] FORCEOUT;

// assign statements (if any)                          
FORCE_BDF i1 (
// port map - connection between master ports and signals/registers   
	.DATAOUT(DATAOUT),
	.EXEC1(EXEC1),
	.FORCEOUT(FORCEOUT)
);
initial 
begin 
#1000000 $finish;
end 
// DATAOUT[ 15 ]
initial
begin
	DATAOUT[15] = 1'b0;
end 
// DATAOUT[ 14 ]
initial
begin
	DATAOUT[14] = 1'b0;
end 
// DATAOUT[ 13 ]
initial
begin
	DATAOUT[13] = 1'b0;
end 
// DATAOUT[ 12 ]
initial
begin
	DATAOUT[12] = 1'b0;
	DATAOUT[12] = #10000 1'b1;
end 
// DATAOUT[ 11 ]
initial
begin
	DATAOUT[11] = 1'b1;
	DATAOUT[11] = #10000 1'b0;
end 
// DATAOUT[ 10 ]
initial
begin
	DATAOUT[10] = 1'b1;
	DATAOUT[10] = #10000 1'b0;
end 
// DATAOUT[ 9 ]
initial
begin
	DATAOUT[9] = 1'b1;
	DATAOUT[9] = #10000 1'b0;
end 
// DATAOUT[ 8 ]
initial
begin
	DATAOUT[8] = 1'b1;
	DATAOUT[8] = #10000 1'b0;
end 
// DATAOUT[ 7 ]
initial
begin
	DATAOUT[7] = 1'b1;
	DATAOUT[7] = #10000 1'b0;
end 
// DATAOUT[ 6 ]
initial
begin
	DATAOUT[6] = 1'b1;
	DATAOUT[6] = #10000 1'b0;
	DATAOUT[6] = #640000 1'b1;
end 
// DATAOUT[ 5 ]
initial
begin
	DATAOUT[5] = 1'b1;
	DATAOUT[5] = #10000 1'b0;
	DATAOUT[5] = #320000 1'b1;
	DATAOUT[5] = #320000 1'b0;
	DATAOUT[5] = #320000 1'b1;
end 
// DATAOUT[ 4 ]
initial
begin
	DATAOUT[4] = 1'b1;
	# 10000;
	repeat(3)
	begin
		DATAOUT[4] = 1'b0;
		DATAOUT[4] = #160000 1'b1;
		# 160000;
	end
	DATAOUT[4] = 1'b0;
end 
// DATAOUT[ 3 ]
initial
begin
	DATAOUT[3] = 1'b1;
	# 10000;
	repeat(6)
	begin
		DATAOUT[3] = 1'b0;
		DATAOUT[3] = #80000 1'b1;
		# 80000;
	end
	DATAOUT[3] = 1'b0;
end 
// DATAOUT[ 2 ]
initial
begin
	DATAOUT[2] = 1'b1;
	# 10000;
	repeat(12)
	begin
		DATAOUT[2] = 1'b0;
		DATAOUT[2] = #40000 1'b1;
		# 40000;
	end
	DATAOUT[2] = 1'b0;
end 
// DATAOUT[ 1 ]
initial
begin
	DATAOUT[1] = 1'b1;
	# 10000;
	repeat(24)
	begin
		DATAOUT[1] = 1'b0;
		DATAOUT[1] = #20000 1'b1;
		# 20000;
	end
	DATAOUT[1] = 1'b0;
	DATAOUT[1] = #20000 1'b1;
end 
// DATAOUT[ 0 ]
always
begin
	DATAOUT[0] = 1'b1;
	DATAOUT[0] = #10000 1'b0;
	#10000;
end 

// EXEC1
initial
begin
	EXEC1 = 1'b0;
end 
endmodule

