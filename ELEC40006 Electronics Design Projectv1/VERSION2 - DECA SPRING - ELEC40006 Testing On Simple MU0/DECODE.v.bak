module DECODE
(

input fetch,
input exec1,
input exec2,
//op=opcode(First_Four_Bits_Of_Insuction)
input [3:0] op,
input EQ,
input MI,

output Extra,
output pc.sload,
output pc.cnt_en,
output mux1.sel,
output mux2.sel,
output mux3.sel,
output IR.en,
output RAM.wren
);

wire LDA,STA,ADD,SUB,JMP,JMI,JEQ,STP,LDI,LSL,LSR;
assign LDA = ~op[3] & ~op[2] & ~op[1] & ~op[0]; //0000
assign STA = ~op[3] & ~op[2] & ~op[1] &  op[0]; //0001
assign ADD = ~op[3] & ~op[2] &  op[1] & ~op[0]; //0010
assign SUB = ~op[3] & ~op[2] &  op[1] &  op[0]; //0011
assign JMP = ~op[3] &  op[2] & ~op[1] & ~op[0]; //0100
assign JMI = ~op[3] &  op[2] & ~op[1] &  op[0]; //0101
assign JEQ = ~op[3] &  op[2] &  op[1] & ~op[0]; //0110
assign STP = ~op[3] &  op[2] &  op[1] &  op[0]; //0111
assign LDI =  op[3] & ~op[2] & ~op[1] & ~op[0]; //1000
assign LSL =  op[3] & ~op[2] & ~op[1] & ~op[0]; //1000
assign LSR =  op[3] & ~op[2] & ~op[1] & ~op[0]; //1000

assign Extra = LDA|ADD|SUB;  
assign pc.sload = exec1 & (JMP | JMI&MI | JEQ&EQ );
assign pc.cnt_en = exec1 & (LDA | STA | SUB | JMI&~MI | JEQ&~EQ | LDI | LSR | LSL ); 
assign mux1.sel = exec1 & (JMP | JMI&MI | JEQ&EQ | STP) | fetch;
assign mux2.sel = exec1;
assign mux3.sel = exec2&ADD | exec2&SUB;
assign IR.en = exec1;
assign RAM.wren = exec1&STA;

endmodule
