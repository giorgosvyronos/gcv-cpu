// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2020 10:41:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TEST_LPM_COUNTER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TEST_LPM_COUNTER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg CNT_EN;
reg [11:0] DATAIN;
reg SLOAD;
// wires                                               
wire [11:0] DATA_OUT;

// assign statements (if any)                          
TEST_LPM_COUNTER i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.CNT_EN(CNT_EN),
	.DATA_OUT(DATA_OUT),
	.DATAIN(DATAIN),
	.SLOAD(SLOAD)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 

// CNT_EN
initial
begin
	CNT_EN = 1'b1;
end 

// SLOAD
initial
begin
	SLOAD = 1'b1;
end 
// DATAIN[ 11 ]
initial
begin
	DATAIN[11] = 1'b0;
end 
// DATAIN[ 10 ]
initial
begin
	DATAIN[10] = 1'b0;
end 
// DATAIN[ 9 ]
initial
begin
	DATAIN[9] = 1'b0;
end 
// DATAIN[ 8 ]
initial
begin
	DATAIN[8] = 1'b0;
end 
// DATAIN[ 7 ]
initial
begin
	DATAIN[7] = 1'b0;
end 
// DATAIN[ 6 ]
initial
begin
	DATAIN[6] = 1'b0;
end 
// DATAIN[ 5 ]
initial
begin
	DATAIN[5] = 1'b0;
end 
// DATAIN[ 4 ]
initial
begin
	DATAIN[4] = 1'b0;
end 
// DATAIN[ 3 ]
initial
begin
	DATAIN[3] = 1'b0;
end 
// DATAIN[ 2 ]
initial
begin
	DATAIN[2] = 1'b1;
end 
// DATAIN[ 1 ]
initial
begin
	DATAIN[1] = 1'b1;
end 
// DATAIN[ 0 ]
initial
begin
	DATAIN[0] = 1'b1;
end 
endmodule

