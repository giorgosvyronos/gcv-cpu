// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/19/2020 01:02:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DECODE_BDF
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DECODE_BDF_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg CLRN;
reg EQ;
reg MI;
reg [3:0] OPCODE;
// wires                                               
wire EXEC1;
wire EXEC2;
wire FETCH;
wire IR_EN;
wire MUX1_SEL;
wire MUX2_SEL;
wire MUX3_SEL;
wire PC_CNT_EN;
wire PC_SLOAD;
wire RAM_WREN;

// assign statements (if any)                          
DECODE_BDF i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.CLRN(CLRN),
	.EQ(EQ),
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.FETCH(FETCH),
	.IR_EN(IR_EN),
	.MI(MI),
	.MUX1_SEL(MUX1_SEL),
	.MUX2_SEL(MUX2_SEL),
	.MUX3_SEL(MUX3_SEL),
	.OPCODE(OPCODE),
	.PC_CNT_EN(PC_CNT_EN),
	.PC_SLOAD(PC_SLOAD),
	.RAM_WREN(RAM_WREN)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 

// CLRN
initial
begin
	CLRN = 1'b1;
end 

// EQ
initial
begin
	EQ = 1'b0;
end 

// MI
initial
begin
	MI = 1'b0;
end 
// OPCODE[ 3 ]
initial
begin
	OPCODE[3] = 1'b0;
end 
// OPCODE[ 2 ]
initial
begin
	OPCODE[2] = 1'b0;
end 
// OPCODE[ 1 ]
initial
begin
	OPCODE[1] = 1'b0;
end 
// OPCODE[ 0 ]
initial
begin
	OPCODE[0] = 1'b0;
end 
endmodule

