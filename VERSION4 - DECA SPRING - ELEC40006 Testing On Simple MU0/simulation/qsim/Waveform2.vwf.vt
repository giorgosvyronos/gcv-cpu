// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/20/2020 22:26:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TASK4_V2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TASK4_V2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [15:0] data;
reg EQ;
reg MI;
// wires                                               
wire [11:0] ADDRESS;
wire [15:0] DATAOUT;
wire EXEC1;
wire EXEC2;
wire FETCH;

// assign statements (if any)                          
TASK4_V2 i1 (
// port map - connection between master ports and signals/registers   
	.ADDRESS(ADDRESS),
	.CLOCK(CLOCK),
	.data(data),
	.DATAOUT(DATAOUT),
	.EQ(EQ),
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.FETCH(FETCH),
	.MI(MI)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
initial
begin
	CLOCK = 1'b1;
	# 10000;
	repeat(49)
	begin
		CLOCK = 1'b0;
		CLOCK = #10000 1'b1;
		# 10000;
	end
	CLOCK = 1'b0;
end 

// MI
initial
begin
	MI = 1'b0;
end 

// EQ
initial
begin
	EQ = 1'b0;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b0;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b0;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 
endmodule

