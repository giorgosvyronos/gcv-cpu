// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2020 00:01:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RND_TESTING_V1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RND_TESTING_V1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg KEEP_VALUE;
reg [1:0] PIPA_IN;
reg RND_CHECK;
// wires                                               
wire [15:0] AxY_OUT_TEST;
wire EXEC1;
wire EXEC2;
wire FETCH;
wire [15:0] LOOP_VALUE_OUT_TEST;
wire [15:0] MUX_Y_OUT_TEST;
wire MUX_Y_SELECT_TEST;
wire [15:0] PIPA_OUT;
wire STEP_PC_OUT_TEST;
wire SUM_FINAL_OUT_SLOAD;
wire [15:0] SUM_FINAL_OUT_TEST;
wire [15:0] Y_PRIME_OUT_TEST;

// assign statements (if any)                          
RND_TESTING_V1 i1 (
// port map - connection between master ports and signals/registers   
	.AxY_OUT_TEST(AxY_OUT_TEST),
	.CLOCK(CLOCK),
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.FETCH(FETCH),
	.KEEP_VALUE(KEEP_VALUE),
	.LOOP_VALUE_OUT_TEST(LOOP_VALUE_OUT_TEST),
	.MUX_Y_OUT_TEST(MUX_Y_OUT_TEST),
	.MUX_Y_SELECT_TEST(MUX_Y_SELECT_TEST),
	.PIPA_IN(PIPA_IN),
	.PIPA_OUT(PIPA_OUT),
	.RND_CHECK(RND_CHECK),
	.STEP_PC_OUT_TEST(STEP_PC_OUT_TEST),
	.SUM_FINAL_OUT_SLOAD(SUM_FINAL_OUT_SLOAD),
	.SUM_FINAL_OUT_TEST(SUM_FINAL_OUT_TEST),
	.Y_PRIME_OUT_TEST(Y_PRIME_OUT_TEST)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 
// PIPA_IN[ 1 ]
initial
begin
	PIPA_IN[1] = 1'b1;
end 
// PIPA_IN[ 0 ]
initial
begin
	PIPA_IN[0] = 1'b1;
end 

// RND_CHECK
initial
begin
	RND_CHECK = 1'b1;
end 

// KEEP_VALUE
initial
begin
	KEEP_VALUE = 1'b0;
end 
endmodule

