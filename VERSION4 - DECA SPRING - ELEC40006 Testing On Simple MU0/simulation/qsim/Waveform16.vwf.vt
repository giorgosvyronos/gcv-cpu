// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2020 15:04:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FBCV_Testing_V1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FBCV_Testing_V1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [11:0] FBCV_IR_PRIME_16_BITS;
// wires                                               
wire EXEC1;
wire EXEC2;
wire FBCV_REG_EN;
wire FETCH;
wire [15:0] MUX_LS;
wire MUX_LS_SELECT;
wire [15:0] MUX_RS;
wire MUX_RS_SELECT;
wire [11:0] PC_OUT;
wire [15:0] RESULT;
wire [15:0] SUM_RESULT;

// assign statements (if any)                          
FBCV_Testing_V1 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.FBCV_IR_PRIME_16_BITS(FBCV_IR_PRIME_16_BITS),
	.FBCV_REG_EN(FBCV_REG_EN),
	.FETCH(FETCH),
	.MUX_LS(MUX_LS),
	.MUX_LS_SELECT(MUX_LS_SELECT),
	.MUX_RS(MUX_RS),
	.MUX_RS_SELECT(MUX_RS_SELECT),
	.PC_OUT(PC_OUT),
	.RESULT(RESULT),
	.SUM_RESULT(SUM_RESULT)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 
// FBCV_IR_PRIME_16_BITS[ 11 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[11] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 10 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[10] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 9 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[9] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 8 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[8] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 7 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[7] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 6 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[6] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 5 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[5] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 4 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[4] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 3 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[3] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 2 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[2] = 1'b1;
end 
// FBCV_IR_PRIME_16_BITS[ 1 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[1] = 1'b0;
end 
// FBCV_IR_PRIME_16_BITS[ 0 ]
initial
begin
	FBCV_IR_PRIME_16_BITS[0] = 1'b1;
end 
endmodule

